{
  
    
        "post0": {
            "title": "Errata of moea-benchmark data",
            "content": "This notebook has been rendered as an HTML page for your navigation. Yet, the notebook is also available for cloning, or to be executed online using Binder or Colab. . Below, you will find an analysis of the difference between the original (indicators.csv.gz) and errata (indicators-errata.csv.gz) datasets. . In detail, the fix affects only tuned MOEA/D results for 10-objective experimental scenarios, and was caused by a typo that prevented MOEA/D from correctly reading input decomposition vectors. . . Setup . The difference in data between datasets has been provided as a separate CSV file in the moea-benchmark repository, for simplicity. The dataset can be read using the pandas data science library for Python, and includes a feature version to indicate whether the data comes from the original dataset or from the errata version. . import pandas as pd df_errata = pd.read_csv(&quot;https://github.com/leobezerra/moea-benchmark/raw/master/moead-errata.csv.gz&quot;) . . setup FE algo indicator nobj problem nvar seed value version . 0 tuned | 2500 | moead | rpd | 10 | DTLZ2 | 31 | 1 | 0.110215 | original | . 1 tuned | 2500 | moead | rpd | 10 | DTLZ2 | 31 | 2 | 0.101172 | original | . 2 tuned | 2500 | moead | rpd | 10 | DTLZ2 | 31 | 3 | 0.101156 | original | . 3 tuned | 2500 | moead | rpd | 10 | DTLZ2 | 31 | 4 | 0.099056 | original | . 4 tuned | 2500 | moead | rpd | 10 | DTLZ2 | 31 | 5 | 0.080091 | original | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Besides pandas, we will also use the Plotly interactive data visualization library. . import re import plotly.express as px import plotly.graph_objects as go . . Boxplots . We start the discussion with boxplots comparing the original and errata data. . Overall, results are improved by the fix, though it varies as a function of indicator and problem. . We remark that a few resources from Plotly can be useful for navigation: . selecting a subset of the MOEAs, by clicking on their names in the legend | zooming into a given range of a given plot, by selecting an area of the plot | . fig_moead = px.box( df_errata, x=&quot;version&quot;, y=&quot;value&quot;, color=&quot;version&quot;, facet_col=&quot;FE&quot;, facet_row=&quot;indicator&quot;, animation_frame=&quot;problem&quot;, height=1000, category_orders={&quot;indicator&quot;: [&quot;rpd&quot;, &quot;eps&quot;, &quot;igd&quot;]} ) # Adjust the ranges ymax = [10, 4, 0.4] for k in fig_moead.layout: if re.search(&#39;yaxis[1-9]*&#39;, k): matches = re.findall(r&#39;( d+)&#39;, k) idx = int(matches[0]) if len(matches) else 1 ymax_idx = (idx-1) // 3 fig_moead.layout[k].update(matches=None, range=(0,ymax[ymax_idx])) . . . . Rank sum . An updated Table 8 for 10-objective scenarios is given below. . Overall, MOEA/D: . greatly improves its relative ranking according to the $ textit{HV}_ textit{rd}$ | improves its rank sum according to the remaining indicators, but not its relative ranking | . # Auxiliary procedure to compute rank sums def rank_sum(df, columns=[&quot;algo&quot;]): df_wide = df.pivot_table( index=[&quot;indicator&quot;, &quot;problem&quot;, &quot;nvar&quot;, &quot;seed&quot;], columns=columns, values=[&quot;value&quot;] ) return df_wide.rank(axis=1).groupby(&quot;indicator&quot;).sum() # Compute the rank sums df = pd.read_csv(&quot;https://github.com/leobezerra/moea-benchmark/raw/master/indicators-errata.csv.gz&quot;) df_rs = df.groupby([&quot;setup&quot;,&quot;FE&quot;, &quot;nobj&quot;]).apply(rank_sum).droplevel(0, axis=1) . . algo sms ibea moead cma nsga nsga3 spea hype moga . tuned 2500 10 rpd 0.0 | 909.0 | 1835.0 | 2145.5 | 3429.0 | 4018.0 | 4862.5 | 6113.0 | 7447.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo moead ibea sms nsga cma nsga3 spea hype moga . tuned 2500 10 eps 0.0 | 1630.0 | 3195.0 | 3590.0 | 3850.5 | 4303.0 | 4519.5 | 5818.0 | 7228.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo ibea nsga3 spea cma sms nsga hype moead moga . tuned 2500 10 igd 0.0 | 875.0 | 1324.5 | 1346.5 | 2128.0 | 2245.0 | 3353.0 | 3610.0 | 5968.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo ibea sms moead cma nsga3 spea nsga hype moga . tuned 10000 10 rpd 0.0 | 429.0 | 1102.0 | 1311.0 | 2804.0 | 2971.0 | 3876.0 | 5419.0 | 6826.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo moead ibea sms cma nsga3 nsga spea hype moga . tuned 10000 10 eps 0.0 | 1421.0 | 3015.0 | 3438.0 | 3499.0 | 4179.0 | 4701.0 | 5359.0 | 7064.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo nsga3 ibea spea nsga sms cma hype moead moga . tuned 10000 10 igd 0.0 | 92.0 | 674.0 | 1744.0 | 2152.0 | 2294.0 | 2563.0 | 2724.0 | 5493.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo ibea sms spea moead cma nsga3 nsga hype moga . tuned 40000 10 rpd 0.0 | 1053.0 | 1588.0 | 1880.0 | 2001.0 | 2444.0 | 2929.0 | 5289.0 | 6825.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo moead ibea nsga3 sms nsga spea cma hype moga . tuned 40000 10 eps 0.0 | 1368.0 | 2855.0 | 3414.0 | 4009.0 | 4262.0 | 4777.0 | 5494.0 | 7424.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo ibea nsga3 spea nsga hype moead cma sms moga . tuned 40000 10 igd 0.0 | 967.0 | 978.0 | 2731.0 | 3027.0 | 3895.0 | 4185.0 | 4599.0 | 6732.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Concluding remarks . In the original dataset, MOEA/D was run for 10-objective scenarios using weight vectors that limited its spread across the objective space. As a result, MOEA/D was able to achieve interesting binary $ epsilon$ results, which value convergence, but poor $ textit{HV}_ textit{rd}$ and $ textit{IGD}$ performance, given these indicators require spread and distribution. . In the errata dataset, results using a spread and distributed set of weight vectors enable MOEA/D to improve its performance according to the $ textit{HV}_ textit{rd}$. Yet, $ textit{IGD}$ performance was not improved to the point of affecting its relative ranking. This is a rather surprising result, given that MOEA/D was originally designed with $ textit{IGD}$ as target metric. We conjecture that these results are an effect of tuning for the binary $ epsilon$ indicator on 10-objective scenarios, as discussed in the paper. .",
            "url": "https://leobezerra.github.io/moea-benchmark-analysis/jupyter/2022/04/01/errata.html",
            "relUrl": "/jupyter/2022/04/01/errata.html",
            "date": " • Apr 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Snapshot analysis of moea-benchmark data",
            "content": "This notebook has been rendered as an HTML page for your navigation. Yet, the notebook is also available for cloning, or to be executed online using Binder or Colab. . Below, you will find the figures and tables from the ECJ paper that consider only outputs at given values of maximum function evaluations ($ textit{FE}_ textit{max}$), which we dub snapshot analysis. . In the paper, we mostly focused on $ textit{FE}_ textit{max}=10000$ results. In this notebook, results are first presented as in the paper, and then provided for more experimental scenarios, when possible. . . Setup . The data for snapshot analysis is provided in the original moea-benchmark repository, and can be read using the pandas data science library for Python. . import pandas as pd df = pd.read_csv(&quot;https://github.com/leobezerra/moea-benchmark/raw/master/indicators.csv.gz&quot;) . . Note that an errata version of this dataset exists, where tuned MOEA/D results for M=10 have been fixed. In case you want to produce the plots and tables using that version, use the following cell instead of the cell above. . import pandas as pd df = pd.read_csv(&quot;https://github.com/leobezerra/moea-benchmark/raw/master/indicators-errata.csv.gz&quot;) . . setup FE algo indicator nobj problem nvar seed value . 0 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 1 | 0.030942 | . 1 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 2 | 0.024093 | . 2 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 3 | 0.032611 | . 3 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 4 | 0.035231 | . 4 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 5 | 0.035426 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Besides pandas, we will also use the Plotly interactive data visualization library. . import re import plotly.express as px import plotly.graph_objects as go . . Finally, to improve plotting clarity, we define querys that remove outliers from the data, when necessary. . rpd_outliers = &quot;indicator == &#39;rpd&#39; and 0 &lt;= value &lt;= 0.4&quot; eps_outliers = &quot;indicator == &#39;eps&#39; and 0 &lt;= value &lt;= 4&quot; igd_outliers = &quot;indicator == &#39;igd&#39; and 0 &lt;= value &lt;= 10&quot; . . . Section 5: Preliminary analysis . In this notebook, we focus on figures and tables that use only snapshot analysis. As such, Figures 2 and 4 are provided in the anytime analysis notebook. . In addition, figures that depend on R packages are not included. For this reason, Figures 3 and 6 are not given. . Figure 1 . Since Figure 1 is a comparison between tuned and default settings of the MOEAs, we exclude MOGA from this analysis, as no default settings are available for this algorithm. . In addition, we remove outliers from this analysis to improve plotting clarity, as previously discussed. . df_no_moga = df.query(&quot;algo != &#39;moga&#39;&quot;) df_no_moga_nor_outliers = df_no_moga.query(f&quot;{rpd_outliers} or {eps_outliers} or {igd_outliers}&quot;) df_tuned_default = df_no_moga_nor_outliers.pivot_table( index=[&quot;FE&quot;, &quot;algo&quot;, &quot;indicator&quot;, &quot;nobj&quot;, &quot;problem&quot;, &quot;nvar&quot;], columns=[&quot;setup&quot;], values=[&quot;value&quot;] ) df_tuned_default = df_tuned_default.droplevel(0, axis=1).reset_index() . . setup FE algo indicator nobj problem nvar default tuned . 0 2500 | cma | eps | 2 | DTLZ2 | 30 | 1.279888 | 1.533545 | . 1 2500 | cma | eps | 2 | DTLZ2 | 40 | 1.983566 | 2.099601 | . 2 2500 | cma | eps | 2 | DTLZ2 | 50 | 2.614604 | 2.657629 | . 3 2500 | cma | eps | 2 | DTLZ4 | 30 | 1.139376 | 2.310213 | . 4 2500 | cma | eps | 2 | DTLZ4 | 40 | 1.992210 | 2.849620 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; # Auxiliary procedure to generate diagonal lines def add_line(fig, xmax, row): fig.add_scatter( x=[0, xmax], y=[0, xmax], mode=&quot;lines&quot;, line=go.scatter.Line(color=&quot;red&quot;), row=row, col=1, showlegend=False, ) # Produce the plot fig = px.scatter( df_tuned_default, x=&quot;tuned&quot;, y=&quot;default&quot;, facet_row=&quot;indicator&quot;, category_orders={&quot;indicator&quot;: [&quot;rpd&quot;, &quot;eps&quot;, &quot;igd&quot;]}, height=800, width=400, ) # Adjust ranges for k in fig.layout: if re.search(&#39;xaxis[1-9]+&#39;, k): fig.layout[k].update(matches=None) for k in fig.layout: if re.search(&#39;yaxis[1-9]+&#39;, k): fig.layout[k].update(matches=None) # Add diagonal lines add_line(fig, 0.4, 3) add_line(fig, 4, 2) add_line(fig, 10, 1) . . . . Table 6 . Table 6 computes Pearson’s correlation coefficient between MOEA rankings for different values of $ textit{FE}_ textit{max}$. . We remark that the rankings for tuned MOEAs are computed including MOGA. . # Auxiliary procedure to compute rank sums def rank_sum(df, columns=[&quot;algo&quot;]): df_wide = df.pivot_table( index=[&quot;indicator&quot;, &quot;problem&quot;, &quot;nvar&quot;, &quot;seed&quot;], columns=columns, values=[&quot;value&quot;] ) return df_wide.rank(axis=1).groupby(&quot;indicator&quot;).sum() # Compute the rank sums df_rs = df.groupby([&quot;setup&quot;,&quot;FE&quot;, &quot;nobj&quot;]).apply(rank_sum).droplevel(0, axis=1) . . For simplicity, we initially compute correlations considering only tuned MOEA rankings. . long_rs_tuned = df_rs.query(&quot;setup == &#39;tuned&#39;&quot;).stack().reset_index(name=&quot;value&quot;) df_rs_tuned = long_rs_tuned.pivot_table( index=[&quot;indicator&quot;, &quot;nobj&quot;, &quot;algo&quot;], columns=[&quot;FE&quot;], values=[&quot;value&quot;] ).droplevel(0, axis=1) . . FE 2500 10000 40000 . FE . 2500 1.000000 | 0.862971 | 0.813624 | . 10000 0.862971 | 1.000000 | 0.940250 | . 40000 0.813624 | 0.940250 | 1.000000 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Lastly, we compute correlations considering only default-setting MOEA rankings. . long_rs_default = df_rs.query(&quot;setup == &#39;default&#39;&quot;).stack().reset_index(name=&quot;value&quot;) df_rs_default = long_rs_default.pivot_table( index=[&quot;indicator&quot;, &quot;nobj&quot;, &quot;algo&quot;], columns=[&quot;FE&quot;], values=[&quot;value&quot;] ).droplevel(0, axis=1) . . FE 2500 10000 40000 . FE . 2500 1.000000 | 0.771288 | 0.676950 | . 10000 0.771288 | 1.000000 | 0.959275 | . 40000 0.676950 | 0.959275 | 1.000000 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Figure 5 . Figure 5 compares IBEA and SMS directly according to the $ textit{HV}_ textit{rd}$ and $ textit{IGD}$ indicators, on a specific experimental scenario. . algo_fig5 = [&quot;ibea&quot;, &quot;sms&quot;] ind_fig5 = [&quot;rpd&quot;, &quot;igd&quot;] scenario_fig5 = &quot;problem == &#39;WFG8&#39; and nobj == 2 and nvar == 30 and FE == 10000&quot; df_fig5 = df.query(f&quot;algo in {algo_fig5} and indicator in {ind_fig5} and {scenario_fig5} and setup == &#39;tuned&#39;&quot;) fig5 = px.box( df_fig5, y=&quot;algo&quot;, x=&quot;value&quot;, color=&quot;algo&quot;, facet_col=&quot;indicator&quot;, height=300, width=600, ) . . . . Alternatively, we also provide code to produce the full set of boxplots from the data produced in the paper. . Note that the code provided has been adjusted to improve clarity, but can be configured in any way desired. . In addition, a few resources from Plotly can be useful for navigation: . selecting a subset of the MOEAs, by clicking on their names in the legend | zooming into a given range of a given plot, by selecting an area of the plot | . df_tuned_no_outliers_10k = df.query(f&quot;setup == &#39;tuned&#39; and FE == 10000 and ({rpd_outliers} or {eps_outliers} or {igd_outliers})&quot;) fig5_full = px.box( df_tuned_no_outliers_10k, x=&quot;nvar&quot;, y=&quot;value&quot;, color=&quot;algo&quot;, facet_col=&quot;nobj&quot;, facet_row=&quot;indicator&quot;, animation_frame=&quot;problem&quot;, height=1000, category_orders={&quot;indicator&quot;: [&quot;rpd&quot;, &quot;eps&quot;, &quot;igd&quot;]} ) # Adjust the ranges ymax = [10, 4, 0.4] for k in fig5_full.layout: if re.search(&#39;yaxis[1-9]*&#39;, k): matches = re.findall(r&#39;( d+)&#39;, k) idx = int(matches[0]) if len(matches) else 1 ymax_idx = (idx-1) // 4 fig5_full.layout[k].update(matches=None, range=(0,ymax[ymax_idx])) . . . . Table 7 . Table 7 computes Pearson’s correlation coefficient between MOEA rankings for different performance metrics. . Like done for Table 6, tuned MOEA rankings are computed including MOGA. . indicator eps igd rpd . nobj indicator . 2 eps 1.000000 | 0.952154 | 0.971495 | . igd 0.952154 | 1.000000 | 0.888355 | . rpd 0.971495 | 0.888355 | 1.000000 | . 3 eps 1.000000 | 0.875681 | 0.938570 | . igd 0.875681 | 1.000000 | 0.857850 | . rpd 0.938570 | 0.857850 | 1.000000 | . 5 eps 1.000000 | 0.902089 | 0.949822 | . igd 0.902089 | 1.000000 | 0.852685 | . rpd 0.949822 | 0.852685 | 1.000000 | . 10 eps 1.000000 | 0.353728 | 0.503038 | . igd 0.353728 | 1.000000 | 0.776752 | . rpd 0.503038 | 0.776752 | 1.000000 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Section 6: Comparison of MOEAs . In this first version of the notebook, we do not include Table 10. . By contrast, the original Table 8 only gives rank sum differences for $ textit{FE}_ textit{max} = 10 ,000$. Here, we give rank sum differences for the three different $ textit{FE}_ textit{max}$. values considered in the experiments. . Table 8 ($ textit{FE}_ textit{max} = 2 ,500$) . algo sms ibea nsga spea moead hype nsga3 cma moga . tuned 2500 2 rpd 0.0 | 11.0 | 456.0 | 971.0 | 1972.0 | 2124.5 | 2396.5 | 5139.5 | 5622.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea nsga spea hype nsga3 moead cma moga . tuned 2500 2 eps 0.0 | 159.0 | 1806.0 | 2048.0 | 2071.5 | 2446.5 | 3976.0 | 5766.5 | 6017.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea nsga3 spea hype nsga cma moead moga . tuned 2500 2 igd 0.0 | 490.0 | 2979.5 | 3025.0 | 3152.5 | 3172.0 | 5494.5 | 6026.0 | 6386.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea hype moead spea nsga nsga3 cma moga . tuned 2500 3 rpd 0.0 | 743.0 | 1516.0 | 2421.5 | 3464.0 | 3950.5 | 4068.5 | 4928.0 | 6727.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea moead hype nsga nsga3 spea cma moga . tuned 2500 3 eps 0.0 | 53.0 | 2456.5 | 3102.0 | 3420.5 | 3580.5 | 4421.0 | 5495.0 | 6352.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo ibea moead sms nsga nsga3 spea hype cma moga . tuned 2500 3 igd 0.0 | 650.5 | 711.0 | 1434.5 | 2710.5 | 3592.0 | 3944.0 | 4883.0 | 5420.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea moead spea nsga cma nsga3 hype moga . tuned 2500 5 rpd 0.0 | 1402.0 | 1603.5 | 3375.5 | 4245.5 | 4274.0 | 4731.5 | 4765.0 | 7463.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea moead nsga3 nsga spea hype cma moga . tuned 2500 5 eps 0.0 | 745.0 | 1221.5 | 2898.5 | 3766.5 | 3785.5 | 4108.0 | 4365.0 | 5588.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms nsga3 ibea moead hype spea nsga cma moga . tuned 2500 5 igd 0.0 | 57.5 | 242.0 | 610.5 | 1034.0 | 1052.5 | 1931.5 | 3214.0 | 4503.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea cma nsga nsga3 spea hype moead moga . tuned 2500 10 rpd 0.0 | 827.0 | 1919.5 | 2965.0 | 3543.0 | 4257.5 | 5525.0 | 6218.0 | 7505.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo moead ibea sms nsga cma nsga3 spea hype moga . tuned 2500 10 eps 0.0 | 370.0 | 2092.0 | 2471.0 | 2791.5 | 3315.0 | 3498.5 | 4878.0 | 6297.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo ibea nsga3 spea cma sms nsga hype moead moga . tuned 2500 10 igd 0.0 | 847.5 | 1272.5 | 1289.5 | 1915.0 | 2228.0 | 3315.0 | 4441.5 | 5562.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Table 8 ($ textit{FE}_ textit{max} = 10 ,000$, original) . algo ibea sms spea nsga moead hype cma nsga3 moga . tuned 10000 2 rpd 0.0 | 113.5 | 1149.5 | 1846.5 | 2819.5 | 3593.0 | 3731.5 | 4017.5 | 6682.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea spea nsga moead hype cma nsga3 moga . tuned 10000 2 eps 0.0 | 425.0 | 894.0 | 1993.0 | 3091.5 | 3401.5 | 3749.0 | 4231.0 | 6740.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms spea ibea hype nsga moead nsga3 cma moga . tuned 10000 2 igd 0.0 | 711.0 | 1387.5 | 2382.5 | 2774.0 | 4237.0 | 5068.0 | 5240.0 | 7297.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea moead hype spea cma nsga nsga3 moga . tuned 10000 3 rpd 0.0 | 556.0 | 1805.0 | 2290.0 | 2302.0 | 3616.0 | 4378.0 | 4627.5 | 7029.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea spea cma hype moead nsga3 nsga moga . tuned 10000 3 eps 0.0 | 494.5 | 2516.0 | 2968.0 | 3132.0 | 3552.0 | 4253.0 | 4885.0 | 7323.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo ibea sms spea moead hype nsga cma nsga3 moga . tuned 10000 3 igd 0.0 | 654.0 | 1041.0 | 1622.0 | 2960.0 | 3640.0 | 4240.0 | 4264.5 | 6886.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms moead ibea spea cma nsga3 nsga hype moga . tuned 10000 5 rpd 0.0 | 1471.0 | 1535.0 | 3295.5 | 3374.0 | 3897.5 | 4130.5 | 5811.5 | 7562.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea moead cma nsga nsga3 spea hype moga . tuned 10000 5 eps 0.0 | 1713.0 | 2569.0 | 2588.0 | 4086.5 | 4124.5 | 4701.5 | 5907.5 | 7664.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea moead nsga cma spea hype nsga3 moga . tuned 10000 5 igd 0.0 | 1898.0 | 2119.0 | 2329.0 | 2515.5 | 3579.5 | 5040.5 | 5225.5 | 7398.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo ibea sms cma nsga3 spea nsga hype moead moga . tuned 10000 10 rpd 0.0 | 222.0 | 1116.0 | 2326.0 | 2532.0 | 3241.0 | 4846.0 | 5114.0 | 6919.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo moead ibea sms cma nsga3 nsga spea hype moga . tuned 10000 10 eps 0.0 | 1258.0 | 2794.0 | 3250.0 | 3347.0 | 4045.0 | 4562.0 | 5214.0 | 6922.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo nsga3 ibea spea nsga sms cma hype moead moga . tuned 10000 10 igd 0.0 | 36.0 | 646.0 | 1776.0 | 1828.0 | 1987.0 | 2557.0 | 4424.0 | 5151.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Table 8 ($ textit{FE}_ textit{max} = 40 ,000$) . algo sms ibea spea nsga moead nsga3 cma hype moga . tuned 40000 2 rpd 0.0 | 453.5 | 791.5 | 1795.5 | 2269.0 | 3492.0 | 3818.0 | 3888.5 | 6788.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms spea ibea nsga moead nsga3 cma hype moga . tuned 40000 2 eps 0.0 | 918.5 | 1197.5 | 2613.5 | 3053.5 | 3208.5 | 3393.5 | 4295.0 | 7060.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms spea ibea moead nsga3 nsga hype cma moga . tuned 40000 2 igd 0.0 | 731.5 | 2404.5 | 2833.0 | 3039.0 | 3409.5 | 4252.5 | 4446.0 | 7364.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea moead spea hype cma nsga nsga3 moga . tuned 40000 3 rpd 0.0 | 715.0 | 1575.0 | 2715.5 | 3510.0 | 3604.0 | 4269.0 | 4276.5 | 7163.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea cma spea moead nsga nsga3 hype moga . tuned 40000 3 eps 0.0 | 994.0 | 2614.0 | 2708.5 | 3137.0 | 4450.0 | 4774.5 | 5284.0 | 7610.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo moead sms spea ibea nsga cma nsga3 hype moga . tuned 40000 3 igd 0.0 | 269.0 | 763.5 | 1668.0 | 2780.0 | 3118.0 | 3984.5 | 4815.0 | 6686.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea moead cma spea nsga3 nsga hype moga . tuned 40000 5 rpd 0.0 | 1154.0 | 1761.0 | 2915.0 | 2995.0 | 3325.5 | 4188.5 | 5826.5 | 7363.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo sms ibea cma moead spea nsga nsga3 hype moga . tuned 40000 5 eps 0.0 | 173.5 | 1610.5 | 1650.0 | 3310.0 | 3988.5 | 4436.5 | 5777.5 | 7097.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo ibea moead sms spea cma nsga nsga3 hype moga . tuned 40000 5 igd 0.0 | 244.0 | 827.0 | 1720.0 | 2074.0 | 2737.5 | 5087.5 | 5189.5 | 6780.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo ibea sms spea cma nsga3 nsga hype moead moga . tuned 40000 10 rpd 0.0 | 897.0 | 1401.0 | 1878.0 | 2416.0 | 2576.0 | 4899.0 | 5077.0 | 7073.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo moead ibea nsga3 sms nsga spea cma hype moga . tuned 40000 10 eps 0.0 | 220.0 | 1836.0 | 2309.0 | 2986.0 | 3252.0 | 3705.0 | 4581.0 | 6518.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; algo ibea nsga3 spea nsga hype cma sms moead moga . tuned 40000 10 igd 0.0 | 928.0 | 942.0 | 2710.0 | 2937.0 | 3725.0 | 4129.0 | 5513.0 | 6584.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Table 9 . Table 9 is a direct comparison between NSGA-II and NSGA-II, using the $ textit{HV}_ textit{rd}$ as performance metric on a selected experimental scenario. . For this analysis, rank sums are computed considering only NSGA-II and NSGA-III, both using default and tuned settings. . algo_tab9 = [&quot;nsga&quot;, &quot;nsga3&quot;] nobj_tab9 = [2,5] df_nsga_tab9 = df.query(f&quot;algo in {algo_tab9} and indicator == &#39;rpd&#39; and nobj in {nobj_tab9} and FE == 10000&quot;) rs_nsga_tab9 = df_nsga_tab9.groupby(&quot;nobj&quot;).apply(rank_sum, columns=[&quot;setup&quot;,&quot;algo&quot;]).droplevel(0, axis=1) . . setup tuned default tuned default . algo nsga nsga nsga3 nsga3 . 2 rpd 0.0 | 1270.5 | 1424.0 | 2257.5 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; setup tuned default . algo nsga nsga3 nsga3 nsga . 5 rpd 0.0 | 11.0 | 901.0 | 1212.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Section 7: Problem-specific analysis . Section 7 includes two figures that focus on snapshot analysis (Figures 7 and 8), which we provide below. . Figure 7 . Figure 7 comprises boxplots of all $ textit{HV}_ textit{rd}$ values for $ textit{FE}_ textit{max} = 10 ,000$, grouped by the number of objectives and benchmark function. . Effectively, Figure 7 depicts how dominance resistance affects problems in different ways. . Note, however, that the original Figure 7 was produced with R&#39;s ggplot2 library, which omits outliers from the plot. . df_rpd_10k = df.query(f&quot;indicator == &#39;rpd&#39; and FE == 10000 and setup == &#39;tuned&#39;&quot;) df_rpd_10k[&quot;nobj&quot;] = df_rpd_10k[&quot;nobj&quot;].astype(&quot;str&quot;) fig7 = px.box( df_rpd_10k, x=&quot;nobj&quot;, color=&quot;nobj&quot;, y=&quot;value&quot;, facet_col=&quot;problem&quot;, range_y=(0,0.4), ) . . . . Figure 8 . Figure 9 comprises boxplots of the $ textit{IGD}$ performance of MOEAs on increasing number of objectives under selected experimental scenarios. . problem_fig8 = [&quot;WFG1&quot;, &quot;WFG4&quot;] nvar_fig8 = [40, 41] setup_fig8 = &quot;FE == 40000 and indicator == &#39;igd&#39; and setup == &#39;tuned&#39;&quot; df_fig8 = df.query(f&quot;problem in {problem_fig8} and nvar in {nvar_fig8} and {setup_fig8}&quot;) fig8 = px.box( df_fig8, x=&quot;value&quot;, y=&quot;algo&quot;, color=&quot;algo&quot;, facet_col=&quot;nobj&quot;, facet_row=&quot;problem&quot;, category_orders={&quot;algo&quot;: [&quot;cma&quot;, &quot;hype&quot;, &quot;ibea&quot;, &quot;moead&quot;, &quot;moga&quot;, &quot;nsga&quot;, &quot;nsga3&quot;, &quot;sms&quot;, &quot;spea&quot;][::-1]}, ) # Adjust the ranges for k in fig8.layout: if re.search(&#39;xaxis[1-9]*&#39;, k): matches = re.findall(r&#39;( d+)&#39;, k) idx = int(matches[0]) if len(matches) else 1 xmax = 4 if idx % 4 != 0 else 10 fig8.layout[k].update(matches=None, range=(0,xmax)) . . . .",
            "url": "https://leobezerra.github.io/moea-benchmark-analysis/jupyter/2022/03/30/snapshot.html",
            "relUrl": "/jupyter/2022/03/30/snapshot.html",
            "date": " • Mar 30, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Anytime analysis of moea-benchmark data",
            "content": "This notebook has been rendered as an HTML page for your navigation. Yet, the notebook is also available for cloning, or to be executed online using Binder or Colab. . Below, you will find the figures and tables from the ECJ paper that consider only outputs outputs over a range of maximum function evaluations. ($ textit{FE}_ textit{max}$), which we dub anytime analysis. . In the paper, we mostly focused on selected scenarios, for brevity. In this notebook, results are first presented as in the paper, and then provided for more experimental scenarios, when possible. . Finally, we remark that this first version of the notebook does not include Section 7 plots. . . Setup . The data for anytime analysis is provided in the original moea-benchmark repository, and can be read using the pandas data science library for Python. . import pandas as pd df_anytime = pd.read_csv(&quot;https://github.com/leobezerra/moea-benchmark/raw/master/anytime.csv.gz&quot;) . . setup config algo indicator nobj problem nvar seed 0 100 ... 49100 49200 49300 49400 49500 49600 49700 49800 49900 50000 . 0 default | NaN | ibea | rpd | 3 | DTLZ2 | 30 | 1 | 0.018914 | 0.018914 | ... | 0.000026 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | . 1 default | NaN | ibea | rpd | 3 | DTLZ2 | 30 | 2 | 0.014705 | 0.014705 | ... | 0.000026 | 0.000025 | 0.000025 | 0.000026 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | . 2 default | NaN | ibea | rpd | 3 | DTLZ2 | 30 | 3 | 0.012488 | 0.012488 | ... | 0.000026 | 0.000025 | 0.000026 | 0.000026 | 0.000026 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000024 | . 3 default | NaN | ibea | rpd | 3 | DTLZ2 | 30 | 4 | 0.016872 | 0.016872 | ... | 0.000025 | 0.000024 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | . 4 default | NaN | ibea | rpd | 3 | DTLZ2 | 30 | 5 | 0.017557 | 0.017557 | ... | 0.000026 | 0.000026 | 0.000026 | 0.000025 | 0.000025 | 0.000025 | 0.000026 | 0.000026 | 0.000025 | 0.000024 | . 5 rows × 509 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; In the data above, setup indicates whether settings used are default or tuned. In the latter case, config indicates for which $ textit{FE}_ textit{max}$ value the settings were configured. . Besides pandas, we will also use the Plotly interactive data visualization library. . import re import plotly.express as px import plotly.graph_objects as go . . We make three adjustments to the data prior to plotting. . To improve clarity, we fill the missing config values with default. | Since the data was produced using 25 different seeds, we compute the mean of the runs. | We index the data by $ textit{FE}_ textit{max}$, which greatly increases the memory usage, but is a requirement for plotting time series data with Plotly. | . df_anytime[&quot;config&quot;] = df_anytime[&quot;config&quot;].fillna(&#39;default&#39;) df_anytime_mean = df_anytime.groupby([&quot;setup&quot;, &quot;config&quot;, &quot;algo&quot;, &quot;indicator&quot;, &quot;nobj&quot;, &quot;problem&quot;, &quot;nvar&quot;]).mean() df_anytime_mean = df_anytime_mean.drop(columns=[&quot;seed&quot;]) ts_anytime = df_anytime_mean.stack().reset_index( [&quot;setup&quot;, &quot;config&quot;, &quot;algo&quot;, &quot;indicator&quot;, &quot;nobj&quot;, &quot;problem&quot;, &quot;nvar&quot;], name=&quot;value&quot; ) ts_anytime.index = ts_anytime.index.astype(&quot;int&quot;) . . setup config algo indicator nobj problem nvar value . 0 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.016579 | . 100 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.016579 | . 200 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.016579 | . 300 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.010874 | . 400 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.008861 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; . Section 5: Preliminary analysis . In this notebook, we focus on figures and tables that use only anytime analysis, namely Figures 2 and 4. . The remainder figures of this section are provided in the snapshot analysis notebook. . Figure 2 . Figure 2 depicts the evolution of the $ textit{HV}_ textit{rd}$ performance of IBEA using DE as underlying EA with different numerical parameter settings, on a given experimental scenario. . A few resources from Plotly can be useful for navigation: . selecting a subset of the settings, by clicking on their names in the legend | zooming into a given range of the plot, by selecting an area of the plot | . ts_ibea_WFG8_3_30 = ts_anytime.query(&quot;algo == &#39;ibea&#39; and problem == &#39;WFG8&#39; and nobj == 3 and nvar == 30&quot;) .sort_index() fig2 = px.line( ts_ibea_WFG8_3_30, y=&quot;value&quot;, x=ts_ibea_WFG8_3_30.index, color=&quot;config&quot;, line_dash=&quot;config&quot;, ) . . . . Alternatively, we also provide code to produce the full set of plots from the data produced in this IBEA experiment. . ts_ibea = ts_anytime.query(&quot;algo == &#39;ibea&#39;&quot;) fig2_full = px.line( ts_ibea, y=&quot;value&quot;, x=ts_ibea.index, color=&quot;config&quot;, line_dash=&quot;config&quot;, animation_frame=&quot;problem&quot;, facet_col=&quot;nvar&quot;, facet_col_wrap=3, range_y=(0,0.4) ) . . . . We remark that, for some problems, IBEA might perform better at a given $ textit{FE}_ textit{max}$ snapshot using a setting configure for a different $ textit{FE}_ textit{max}$. . Yet, when we compute rank sums using the results from the values used for configuration, we see that each setting is the most adequate choice for its corresponding setup. . df_ibea_snapshots = ts_ibea.loc[[2500,10000,40000]].reset_index().rename(columns={&quot;index&quot;: &quot;FE&quot;}) rs_ibea_snapshots = df_ibea_snapshots.drop(columns=[&quot;setup&quot;, &quot;algo&quot;, &quot;indicator&quot;]) .pivot_table(index=[&quot;problem&quot;, &quot;nobj&quot;, &quot;nvar&quot;, &quot;FE&quot;], columns=[&quot;config&quot;]) .rank(axis=1).groupby(&quot;FE&quot;).sum() . . value . config 2500.0 10000.0 40000.0 default . 2500 0.0 | 30.0 | 76.0 | 90.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; value . config 10000.0 40000.0 2500.0 default . 10000 0.0 | 19.0 | 46.0 | 59.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; value . config 40000.0 10000.0 default 2500.0 . 40000 0.0 | 30.0 | 33.0 | 93.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Figure 4 . Figure 2 depicts the evolution of the $ textit{HV}_ textit{rd}$ performance of different MOEAs using parameter settings tuned for a common stopping criterion ($ textit{FE}_ textit{max} = 10,000$) on a given experimental scenario. . ts_10k_WFG3_3_50 = ts_anytime.query(&quot;config == 10000 and problem == &#39;WFG3&#39; and nobj == 3 and nvar == 50&quot;) .sort_index() fig4 = px.line( ts_10k_WFG3_3_50, y=&quot;value&quot;, x=ts_10k_WFG3_3_50.index, color=&quot;algo&quot;, line_dash=&quot;algo&quot;, ) . . . . Alternatively, we also provide code to produce the full set of plots from the data produced in this experiment. . ts_10k = ts_anytime.query(&quot;config == 10000&quot;) fig4_full = px.line( ts_10k, y=&quot;value&quot;, x=ts_10k.index, color=&quot;algo&quot;, line_dash=&quot;algo&quot;, animation_frame=&quot;problem&quot;, facet_col=&quot;nvar&quot;, facet_col_wrap=3, range_y=(0,0.4) ) for k in fig4_full.layout: if re.search(&#39;yaxis[1-9]+&#39;, k): fig4_full.layout[k].update(matches=None) . . . . Note that the erratic behavior of NSGA-II has been extensively reported in the literature, being a consequence of its environmental replacement strategy. .",
            "url": "https://leobezerra.github.io/moea-benchmark-analysis/jupyter/2022/03/30/anytime.html",
            "relUrl": "/jupyter/2022/03/30/anytime.html",
            "date": " • Mar 30, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://leobezerra.github.io/moea-benchmark-analysis/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://leobezerra.github.io/moea-benchmark-analysis/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}