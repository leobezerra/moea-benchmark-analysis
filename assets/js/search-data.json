{
  
    
        "post0": {
            "title": "Title",
            "content": "import re import pandas as pd import seaborn as sns sns.set() import plotly.express as px import plotly.graph_objects as go . df = pd.read_csv(&quot;indicators.csv.gz&quot;) df.head() . setup FE algo indicator nobj problem nvar seed value . 0 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 1 | 0.030942 | . 1 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 2 | 0.024093 | . 2 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 3 | 0.032611 | . 3 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 4 | 0.035231 | . 4 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 5 | 0.035426 | . rpd_outliers = &quot;indicator == &#39;rpd&#39; and 0 &lt;= value &lt;= 0.4&quot; eps_outliers = &quot;indicator == &#39;eps&#39; and 0 &lt;= value &lt;= 4&quot; igd_outliers = &quot;indicator == &#39;igd&#39; and 0 &lt;= value &lt;= 10&quot; . Figure 1 . df_no_moga = df.query(&quot;algo != &#39;moga&#39;&quot;) df_no_moga_nor_outliers = df_no_moga.query(f&quot;{rpd_outliers} or {eps_outliers} or {igd_outliers}&quot;) df_tuned_default = df_no_moga_nor_outliers.pivot_table( index=[&quot;FE&quot;, &quot;algo&quot;, &quot;indicator&quot;, &quot;nobj&quot;, &quot;problem&quot;, &quot;nvar&quot;], columns=[&quot;setup&quot;], values=[&quot;value&quot;] ) df_tuned_default = df_tuned_default.droplevel(0, axis=1).reset_index() df_tuned_default . setup FE algo indicator nobj problem nvar default tuned . 0 2500 | cma | eps | 2 | DTLZ2 | 30 | 1.279888 | 1.533545 | . 1 2500 | cma | eps | 2 | DTLZ2 | 40 | 1.983566 | 2.099601 | . 2 2500 | cma | eps | 2 | DTLZ2 | 50 | 2.614604 | 2.657629 | . 3 2500 | cma | eps | 2 | DTLZ4 | 30 | 1.139376 | 2.310213 | . 4 2500 | cma | eps | 2 | DTLZ4 | 40 | 1.992210 | 2.849620 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 11524 40000 | spea | rpd | 10 | WFG8 | 41 | 0.167205 | 0.016128 | . 11525 40000 | spea | rpd | 10 | WFG8 | 51 | 0.168898 | 0.018795 | . 11526 40000 | spea | rpd | 10 | WFG9 | 31 | 0.130161 | 0.159438 | . 11527 40000 | spea | rpd | 10 | WFG9 | 41 | 0.153218 | 0.183199 | . 11528 40000 | spea | rpd | 10 | WFG9 | 51 | 0.198191 | 0.204703 | . 11529 rows × 8 columns . def add_line(fig, xmax, col): fig.add_scatter( x=[0, xmax], y=[0, xmax], mode=&quot;lines&quot;, line=go.scatter.Line(color=&quot;red&quot;), row=1, col=col, showlegend=False, ) . fig = px.scatter( df_tuned_default, x=&quot;tuned&quot;, y=&quot;default&quot;, facet_col=&quot;indicator&quot;, category_orders={&quot;indicator&quot;: [&quot;rpd&quot;, &quot;eps&quot;, &quot;igd&quot;]}, height=400, ) for k in fig.layout: if re.search(&#39;xaxis[1-9]+&#39;, k): fig.layout[k].update(matches=None) for k in fig.layout: if re.search(&#39;yaxis[1-9]+&#39;, k): fig.layout[k].update(matches=None) add_line(fig, 0.4, 1) add_line(fig, 4, 2) add_line(fig, 10, 3) fig . Figure 2 . df_anytime = pd.read_csv(&quot;anytime.csv.gz&quot;) df_anytime[&quot;config&quot;] = df_anytime[&quot;config&quot;].fillna(&quot;default&quot;) df_anytime . setup config algo indicator nobj problem nvar seed 0 100 ... 49100 49200 49300 49400 49500 49600 49700 49800 49900 50000 . 0 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 1 | 0.018914 | 0.018914 | ... | 0.000026 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | . 1 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 2 | 0.014705 | 0.014705 | ... | 0.000026 | 0.000025 | 0.000025 | 0.000026 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | . 2 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 3 | 0.012488 | 0.012488 | ... | 0.000026 | 0.000025 | 0.000026 | 0.000026 | 0.000026 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000024 | . 3 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 4 | 0.016872 | 0.016872 | ... | 0.000025 | 0.000024 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | . 4 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 5 | 0.017557 | 0.017557 | ... | 0.000026 | 0.000026 | 0.000026 | 0.000025 | 0.000025 | 0.000025 | 0.000026 | 0.000026 | 0.000025 | 0.000024 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 7345 tuned | 10000 | spea | rpd | 3 | WFG9 | 50 | 21 | 0.319248 | 0.273683 | ... | 0.009358 | 0.009483 | 0.009145 | 0.009404 | 0.008750 | 0.009153 | 0.009152 | 0.009182 | 0.009248 | 0.009218 | . 7346 tuned | 10000 | spea | rpd | 3 | WFG9 | 50 | 22 | 0.287983 | 0.269812 | ... | 0.022561 | 0.021796 | 0.022061 | 0.022061 | 0.022061 | 0.022061 | 0.022061 | 0.022061 | 0.022061 | 0.022061 | . 7347 tuned | 10000 | spea | rpd | 3 | WFG9 | 50 | 23 | 0.338829 | 0.283009 | ... | 0.009563 | 0.010079 | 0.007908 | 0.007795 | 0.007770 | 0.007758 | 0.007855 | 0.009834 | 0.009410 | 0.009380 | . 7348 tuned | 10000 | spea | rpd | 3 | WFG9 | 50 | 24 | 0.316427 | 0.300587 | ... | 0.009780 | 0.009780 | 0.009780 | 0.009780 | 0.009780 | 0.009780 | 0.009780 | 0.009780 | 0.009780 | 0.009780 | . 7349 tuned | 10000 | spea | rpd | 3 | WFG9 | 50 | 25 | 0.317221 | 0.302947 | ... | 0.014507 | 0.014507 | 0.014507 | 0.014507 | 0.014507 | 0.014507 | 0.014507 | 0.014507 | 0.014507 | 0.014507 | . 7350 rows × 509 columns . df_anytime_mean = df_anytime.groupby([&quot;setup&quot;, &quot;config&quot;, &quot;algo&quot;, &quot;indicator&quot;, &quot;nobj&quot;, &quot;problem&quot;, &quot;nvar&quot;]).mean() df_anytime_mean = df_anytime_mean.drop(columns=[&quot;seed&quot;]) ts_anytime = df_anytime_mean.stack().reset_index( [&quot;setup&quot;, &quot;config&quot;, &quot;algo&quot;, &quot;indicator&quot;, &quot;nobj&quot;, &quot;problem&quot;, &quot;nvar&quot;], name=&quot;value&quot; ) ts_anytime.index = ts_anytime.index.astype(&quot;int&quot;) ts_anytime . setup config algo indicator nobj problem nvar value . 0 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.016579 | . 100 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.016579 | . 200 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.016579 | . 300 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.010874 | . 400 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.008861 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 49600 tuned | 40000 | ibea | rpd | 3 | WFG9 | 50 | 0.003880 | . 49700 tuned | 40000 | ibea | rpd | 3 | WFG9 | 50 | 0.003826 | . 49800 tuned | 40000 | ibea | rpd | 3 | WFG9 | 50 | 0.003777 | . 49900 tuned | 40000 | ibea | rpd | 3 | WFG9 | 50 | 0.003810 | . 50000 tuned | 40000 | ibea | rpd | 3 | WFG9 | 50 | 0.003835 | . 147294 rows × 8 columns . ts_ibea_WFG8_3_30 = ts_anytime.query(&quot;algo == &#39;ibea&#39; and problem == &#39;WFG8&#39; and nobj == 3 and nvar == 30&quot;) .sort_index() fig2 = px.line( ts_ibea_WFG8_3_30, y=&quot;value&quot;, x=ts_ibea_WFG8_3_30.index, color=&quot;config&quot;, line_dash=&quot;config&quot;, ) fig2.show() . ts_ibea = ts_anytime.query(&quot;algo == &#39;ibea&#39;&quot;) fig2_full = px.line( ts_ibea, y=&quot;value&quot;, x=ts_ibea.index, color=&quot;config&quot;, line_dash=&quot;config&quot;, animation_frame=&quot;nvar&quot;, facet_col=&quot;problem&quot;, facet_col_wrap=3, height=1500, ) fig2_full.show() . df_ibea_snapshots = ts_ibea.loc[[2500,10000,40000]].reset_index().rename(columns={&quot;index&quot;: &quot;FE&quot;}) rs_ibea_snapshots = df_ibea_snapshots.drop(columns=[&quot;setup&quot;, &quot;algo&quot;, &quot;indicator&quot;]) .pivot_table(index=[&quot;problem&quot;, &quot;nobj&quot;, &quot;nvar&quot;, &quot;FE&quot;], columns=[&quot;config&quot;]) .rank(axis=1).groupby(&quot;FE&quot;).sum() for FE in [2500, 10000, 40000]: rs_ibea_diff = (rs_ibea_snapshots.loc[FE] - rs_ibea_snapshots.loc[FE].min()) display(rs_ibea_diff.sort_values().to_frame().T) . value . config 2500.0 10000.0 40000.0 default . 2500 0.0 | 30.0 | 76.0 | 90.0 | . value . config 10000.0 40000.0 2500.0 default . 10000 0.0 | 19.0 | 46.0 | 59.0 | . value . config 40000.0 10000.0 default 2500.0 . 40000 0.0 | 30.0 | 33.0 | 93.0 | . Figure 4 . ts_10k_WFG3_3_50 = ts_anytime.query(&quot;config == 10000 and problem == &#39;WFG3&#39; and nobj == 3 and nvar == 50&quot;) .sort_index() fig4 = px.line( ts_10k_WFG3_3_50, y=&quot;value&quot;, x=ts_10k_WFG3_3_50.index, color=&quot;algo&quot;, line_dash=&quot;algo&quot;, ) fig4.show() . ts_10k = ts_anytime.query(&quot;config == 10000&quot;) fig4_full = px.line( ts_10k, y=&quot;value&quot;, x=ts_10k.index, color=&quot;algo&quot;, line_dash=&quot;algo&quot;, animation_frame=&quot;nvar&quot;, facet_col=&quot;problem&quot;, facet_col_wrap=3, height=1500, ) for k in fig4_full.layout: if re.search(&#39;yaxis[1-9]+&#39;, k): fig4_full.layout[k].update(matches=None) fig4_full.show() . Figure 5 . algo_fig5 = [&quot;ibea&quot;, &quot;sms&quot;] ind_fig5 = [&quot;rpd&quot;, &quot;igd&quot;] scenario_fig5 = &quot;problem == &#39;WFG8&#39; and nobj == 2 and nvar == 30 and FE == 10000&quot; df_fig5 = df.query(f&quot;algo in {algo_fig5} and indicator in {ind_fig5} and {scenario_fig5} and setup == &#39;tuned&#39;&quot;) fig5 = px.box( df_fig5, y=&quot;algo&quot;, x=&quot;value&quot;, color=&quot;algo&quot;, facet_col=&quot;indicator&quot;, height=300, width=600, ) fig5.show() . df_tuned_no_outliers = df.query(f&quot;setup == &#39;tuned&#39; and {rpd_outliers} or {eps_outliers} or {igd_outliers}&quot;) fig5_full = px.box( df_tuned_no_outliers, x=&quot;nvar&quot;, y=&quot;value&quot;, color=&quot;algo&quot;, facet_col=&quot;nobj&quot;, facet_row=&quot;problem&quot;, animation_frame=&quot;indicator&quot;, height=4000, category_orders={&quot;indicator&quot;: [&quot;rpd&quot;, &quot;eps&quot;, &quot;igd&quot;]} # width=600, ) # for k in fig5_full.layout: # if re.search(&#39;yaxis[1-9]+&#39;, k): # fig5_full.layout[k].update(matches=None) fig5_full.show() . Table 6 . def rank_sum(df, columns=[&quot;algo&quot;]): df_wide = df.pivot_table( index=[&quot;indicator&quot;, &quot;problem&quot;, &quot;nvar&quot;, &quot;seed&quot;], columns=columns, values=[&quot;value&quot;] ) return df_wide.rank(axis=1).groupby(&quot;indicator&quot;).sum() . df_rs = df.groupby([&quot;setup&quot;,&quot;FE&quot;, &quot;nobj&quot;]).apply(rank_sum).droplevel(0, axis=1) . long_rs_tuned = df_rs.query(&quot;setup == &#39;tuned&#39;&quot;).stack().reset_index(name=&quot;value&quot;) long_rs_tuned.pivot_table( index=[&quot;indicator&quot;, &quot;nobj&quot;, &quot;algo&quot;], columns=[&quot;FE&quot;], values=[&quot;value&quot;] ).droplevel(0, axis=1).corr() . FE 2500 10000 40000 . FE . 2500 1.000000 | 0.862971 | 0.813624 | . 10000 0.862971 | 1.000000 | 0.940250 | . 40000 0.813624 | 0.940250 | 1.000000 | . long_rs_default = df_rs.query(&quot;setup == &#39;default&#39;&quot;).stack().reset_index(name=&quot;value&quot;) long_rs_default.pivot_table( index=[&quot;indicator&quot;, &quot;nobj&quot;, &quot;algo&quot;], columns=[&quot;FE&quot;], values=[&quot;value&quot;] ).droplevel(0, axis=1).corr() . FE 2500 10000 40000 . FE . 2500 1.000000 | 0.771288 | 0.676950 | . 10000 0.771288 | 1.000000 | 0.959275 | . 40000 0.676950 | 0.959275 | 1.000000 | . Table 7 . long_rs_tuned.groupby(&quot;nobj&quot;).apply(lambda x : x.pivot_table( index=[&quot;FE&quot;, &quot;algo&quot;], columns=[&quot;indicator&quot;], values=[&quot;value&quot;] ).droplevel(0, axis=1).corr()) . indicator eps igd rpd . nobj indicator . 2 eps 1.000000 | 0.952154 | 0.971495 | . igd 0.952154 | 1.000000 | 0.888355 | . rpd 0.971495 | 0.888355 | 1.000000 | . 3 eps 1.000000 | 0.875681 | 0.938570 | . igd 0.875681 | 1.000000 | 0.857850 | . rpd 0.938570 | 0.857850 | 1.000000 | . 5 eps 1.000000 | 0.902089 | 0.949822 | . igd 0.902089 | 1.000000 | 0.852685 | . rpd 0.949822 | 0.852685 | 1.000000 | . 10 eps 1.000000 | 0.353728 | 0.503038 | . igd 0.353728 | 1.000000 | 0.776752 | . rpd 0.503038 | 0.776752 | 1.000000 | . Table 8 . for FE in [2500, 10000, 40000]: for nobj in [2,3,5,10]: for indicator in [&quot;rpd&quot;, &quot;eps&quot;, &quot;igd&quot;]: idx = (&quot;tuned&quot;, FE, nobj, indicator) rs_diff = (df_rs.loc[idx] - df_rs.loc[idx].min()) display(rs_diff.sort_values().to_frame().T) . algo sms ibea nsga spea moead hype nsga3 cma moga . tuned 2500 2 rpd 0.0 | 11.0 | 456.0 | 971.0 | 1972.0 | 2124.5 | 2396.5 | 5139.5 | 5622.5 | . algo sms ibea nsga spea hype nsga3 moead cma moga . tuned 2500 2 eps 0.0 | 159.0 | 1806.0 | 2048.0 | 2071.5 | 2446.5 | 3976.0 | 5766.5 | 6017.5 | . algo sms ibea nsga3 spea hype nsga cma moead moga . tuned 2500 2 igd 0.0 | 490.0 | 2979.5 | 3025.0 | 3152.5 | 3172.0 | 5494.5 | 6026.0 | 6386.5 | . algo sms ibea hype moead spea nsga nsga3 cma moga . tuned 2500 3 rpd 0.0 | 743.0 | 1516.0 | 2421.5 | 3464.0 | 3950.5 | 4068.5 | 4928.0 | 6727.5 | . algo sms ibea moead hype nsga nsga3 spea cma moga . tuned 2500 3 eps 0.0 | 53.0 | 2456.5 | 3102.0 | 3420.5 | 3580.5 | 4421.0 | 5495.0 | 6352.5 | . algo ibea moead sms nsga nsga3 spea hype cma moga . tuned 2500 3 igd 0.0 | 650.5 | 711.0 | 1434.5 | 2710.5 | 3592.0 | 3944.0 | 4883.0 | 5420.5 | . algo sms ibea moead spea nsga cma nsga3 hype moga . tuned 2500 5 rpd 0.0 | 1402.0 | 1603.5 | 3375.5 | 4245.5 | 4274.0 | 4731.5 | 4765.0 | 7463.0 | . algo sms ibea moead nsga3 nsga spea hype cma moga . tuned 2500 5 eps 0.0 | 745.0 | 1221.5 | 2898.5 | 3766.5 | 3785.5 | 4108.0 | 4365.0 | 5588.0 | . algo sms nsga3 ibea moead hype spea nsga cma moga . tuned 2500 5 igd 0.0 | 57.5 | 242.0 | 610.5 | 1034.0 | 1052.5 | 1931.5 | 3214.0 | 4503.0 | . algo sms ibea cma nsga nsga3 spea hype moead moga . tuned 2500 10 rpd 0.0 | 827.0 | 1919.5 | 2965.0 | 3543.0 | 4257.5 | 5525.0 | 6218.0 | 7505.0 | . algo moead ibea sms nsga cma nsga3 spea hype moga . tuned 2500 10 eps 0.0 | 370.0 | 2092.0 | 2471.0 | 2791.5 | 3315.0 | 3498.5 | 4878.0 | 6297.0 | . algo ibea nsga3 spea cma sms nsga hype moead moga . tuned 2500 10 igd 0.0 | 847.5 | 1272.5 | 1289.5 | 1915.0 | 2228.0 | 3315.0 | 4441.5 | 5562.0 | . algo ibea sms spea nsga moead hype cma nsga3 moga . tuned 10000 2 rpd 0.0 | 113.5 | 1149.5 | 1846.5 | 2819.5 | 3593.0 | 3731.5 | 4017.5 | 6682.5 | . algo sms ibea spea nsga moead hype cma nsga3 moga . tuned 10000 2 eps 0.0 | 425.0 | 894.0 | 1993.0 | 3091.5 | 3401.5 | 3749.0 | 4231.0 | 6740.0 | . algo sms spea ibea hype nsga moead nsga3 cma moga . tuned 10000 2 igd 0.0 | 711.0 | 1387.5 | 2382.5 | 2774.0 | 4237.0 | 5068.0 | 5240.0 | 7297.0 | . algo sms ibea moead hype spea cma nsga nsga3 moga . tuned 10000 3 rpd 0.0 | 556.0 | 1805.0 | 2290.0 | 2302.0 | 3616.0 | 4378.0 | 4627.5 | 7029.5 | . algo sms ibea spea cma hype moead nsga3 nsga moga . tuned 10000 3 eps 0.0 | 494.5 | 2516.0 | 2968.0 | 3132.0 | 3552.0 | 4253.0 | 4885.0 | 7323.5 | . algo ibea sms spea moead hype nsga cma nsga3 moga . tuned 10000 3 igd 0.0 | 654.0 | 1041.0 | 1622.0 | 2960.0 | 3640.0 | 4240.0 | 4264.5 | 6886.5 | . algo sms moead ibea spea cma nsga3 nsga hype moga . tuned 10000 5 rpd 0.0 | 1471.0 | 1535.0 | 3295.5 | 3374.0 | 3897.5 | 4130.5 | 5811.5 | 7562.0 | . algo sms ibea moead cma nsga nsga3 spea hype moga . tuned 10000 5 eps 0.0 | 1713.0 | 2569.0 | 2588.0 | 4086.5 | 4124.5 | 4701.5 | 5907.5 | 7664.0 | . algo sms ibea moead nsga cma spea hype nsga3 moga . tuned 10000 5 igd 0.0 | 1898.0 | 2119.0 | 2329.0 | 2515.5 | 3579.5 | 5040.5 | 5225.5 | 7398.0 | . algo ibea sms cma nsga3 spea nsga hype moead moga . tuned 10000 10 rpd 0.0 | 222.0 | 1116.0 | 2326.0 | 2532.0 | 3241.0 | 4846.0 | 5114.0 | 6919.0 | . algo moead ibea sms cma nsga3 nsga spea hype moga . tuned 10000 10 eps 0.0 | 1258.0 | 2794.0 | 3250.0 | 3347.0 | 4045.0 | 4562.0 | 5214.0 | 6922.0 | . algo nsga3 ibea spea nsga sms cma hype moead moga . tuned 10000 10 igd 0.0 | 36.0 | 646.0 | 1776.0 | 1828.0 | 1987.0 | 2557.0 | 4424.0 | 5151.0 | . algo sms ibea spea nsga moead nsga3 cma hype moga . tuned 40000 2 rpd 0.0 | 453.5 | 791.5 | 1795.5 | 2269.0 | 3492.0 | 3818.0 | 3888.5 | 6788.5 | . algo sms spea ibea nsga moead nsga3 cma hype moga . tuned 40000 2 eps 0.0 | 918.5 | 1197.5 | 2613.5 | 3053.5 | 3208.5 | 3393.5 | 4295.0 | 7060.0 | . algo sms spea ibea moead nsga3 nsga hype cma moga . tuned 40000 2 igd 0.0 | 731.5 | 2404.5 | 2833.0 | 3039.0 | 3409.5 | 4252.5 | 4446.0 | 7364.5 | . algo sms ibea moead spea hype cma nsga nsga3 moga . tuned 40000 3 rpd 0.0 | 715.0 | 1575.0 | 2715.5 | 3510.0 | 3604.0 | 4269.0 | 4276.5 | 7163.0 | . algo sms ibea cma spea moead nsga nsga3 hype moga . tuned 40000 3 eps 0.0 | 994.0 | 2614.0 | 2708.5 | 3137.0 | 4450.0 | 4774.5 | 5284.0 | 7610.0 | . algo moead sms spea ibea nsga cma nsga3 hype moga . tuned 40000 3 igd 0.0 | 269.0 | 763.5 | 1668.0 | 2780.0 | 3118.0 | 3984.5 | 4815.0 | 6686.0 | . algo sms ibea moead cma spea nsga3 nsga hype moga . tuned 40000 5 rpd 0.0 | 1154.0 | 1761.0 | 2915.0 | 2995.0 | 3325.5 | 4188.5 | 5826.5 | 7363.5 | . algo sms ibea cma moead spea nsga nsga3 hype moga . tuned 40000 5 eps 0.0 | 173.5 | 1610.5 | 1650.0 | 3310.0 | 3988.5 | 4436.5 | 5777.5 | 7097.5 | . algo ibea moead sms spea cma nsga nsga3 hype moga . tuned 40000 5 igd 0.0 | 244.0 | 827.0 | 1720.0 | 2074.0 | 2737.5 | 5087.5 | 5189.5 | 6780.5 | . algo ibea sms spea cma nsga3 nsga hype moead moga . tuned 40000 10 rpd 0.0 | 897.0 | 1401.0 | 1878.0 | 2416.0 | 2576.0 | 4899.0 | 5077.0 | 7073.0 | . algo moead ibea nsga3 sms nsga spea cma hype moga . tuned 40000 10 eps 0.0 | 220.0 | 1836.0 | 2309.0 | 2986.0 | 3252.0 | 3705.0 | 4581.0 | 6518.0 | . algo ibea nsga3 spea nsga hype cma sms moead moga . tuned 40000 10 igd 0.0 | 928.0 | 942.0 | 2710.0 | 2937.0 | 3725.0 | 4129.0 | 5513.0 | 6584.0 | . Table 9 . algo_tab9 = [&quot;nsga&quot;, &quot;nsga3&quot;] nobj_tab9 = [2,5] df_nsga_tab9 = df.query(f&quot;algo in {algo_tab9} and indicator == &#39;rpd&#39; and nobj in {nobj_tab9} and FE == 10000&quot;) rs_nsga_tab9 = df_nsga_tab9.groupby(&quot;nobj&quot;).apply(rank_sum, columns=[&quot;setup&quot;,&quot;algo&quot;]).droplevel(0, axis=1) for nobj in [2,5]: idx = (nobj, &quot;rpd&quot;) rs_diff_tab9 = (rs_nsga_tab9.loc[idx] - rs_nsga_tab9.loc[idx].min()) display(rs_diff_tab9.sort_values().to_frame().T) . setup tuned default tuned default . algo nsga nsga nsga3 nsga3 . 2 rpd 0.0 | 1270.5 | 1424.0 | 2257.5 | . setup tuned default . algo nsga nsga3 nsga3 nsga . 5 rpd 0.0 | 11.0 | 901.0 | 1212.0 | . Figure 7 . df_rpd_10k = df.query(f&quot;indicator == &#39;rpd&#39; and FE == 10000 and setup == &#39;tuned&#39; and {rpd_outliers}&quot;) df_rpd_10k[&quot;nobj&quot;] = df_rpd_10k[&quot;nobj&quot;].astype(&quot;category&quot;) px.box( df_rpd_10k, x=&quot;nobj&quot;, color=&quot;nobj&quot;, y=&quot;value&quot;, facet_col=&quot;problem&quot;, facet_col_wrap=7, range_y=(0,0.4), points=False, ) . /home/a206/.local/lib/python3.6/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy . Figure 8 . problem_fig8 = [&quot;WFG1&quot;, &quot;WFG4&quot;] nvar_fig8 = [40, 41] setup_fig8 = &quot;FE == 40000 and indicator == &#39;igd&#39; and setup == &#39;tuned&#39;&quot; df_fig8 = df.query(f&quot;problem in {problem_fig8} and nvar in {nvar_fig8} and {setup_fig8} and {igd_outliers}&quot;) fig8 = px.box( df_fig8, x=&quot;value&quot;, y=&quot;algo&quot;, color=&quot;algo&quot;, facet_col=&quot;nobj&quot;, facet_row=&quot;problem&quot;, category_orders={&quot;algo&quot;: [&quot;cma&quot;, &quot;hype&quot;, &quot;ibea&quot;, &quot;moead&quot;, &quot;moga&quot;, &quot;nsga&quot;, &quot;nsga3&quot;, &quot;sms&quot;, &quot;spea&quot;][::-1]}, ) fig8.show() .",
            "url": "https://leobezerra.github.io/moea-benchmark-analysis/2022/03/30/snapshot.html",
            "relUrl": "/2022/03/30/snapshot.html",
            "date": " • Mar 30, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "import re import pandas as pd import seaborn as sns sns.set() import plotly.express as px import plotly.graph_objects as go . df = pd.read_csv(&quot;indicators.csv.gz&quot;) df.head() . setup FE algo indicator nobj problem nvar seed value . 0 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 1 | 0.030942 | . 1 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 2 | 0.024093 | . 2 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 3 | 0.032611 | . 3 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 4 | 0.035231 | . 4 default | 2500 | cma | rpd | 2 | DTLZ2 | 30 | 5 | 0.035426 | . rpd_outliers = &quot;indicator == &#39;rpd&#39; and 0 &lt;= value &lt;= 0.4&quot; eps_outliers = &quot;indicator == &#39;eps&#39; and 0 &lt;= value &lt;= 4&quot; igd_outliers = &quot;indicator == &#39;igd&#39; and 0 &lt;= value &lt;= 10&quot; . Figure 1 . df_no_moga = df.query(&quot;algo != &#39;moga&#39;&quot;) df_no_moga_nor_outliers = df_no_moga.query(f&quot;{rpd_outliers} or {eps_outliers} or {igd_outliers}&quot;) df_tuned_default = df_no_moga_nor_outliers.pivot_table( index=[&quot;FE&quot;, &quot;algo&quot;, &quot;indicator&quot;, &quot;nobj&quot;, &quot;problem&quot;, &quot;nvar&quot;], columns=[&quot;setup&quot;], values=[&quot;value&quot;] ) df_tuned_default = df_tuned_default.droplevel(0, axis=1).reset_index() df_tuned_default . setup FE algo indicator nobj problem nvar default tuned . 0 2500 | cma | eps | 2 | DTLZ2 | 30 | 1.279888 | 1.533545 | . 1 2500 | cma | eps | 2 | DTLZ2 | 40 | 1.983566 | 2.099601 | . 2 2500 | cma | eps | 2 | DTLZ2 | 50 | 2.614604 | 2.657629 | . 3 2500 | cma | eps | 2 | DTLZ4 | 30 | 1.139376 | 2.310213 | . 4 2500 | cma | eps | 2 | DTLZ4 | 40 | 1.992210 | 2.849620 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 11524 40000 | spea | rpd | 10 | WFG8 | 41 | 0.167205 | 0.016128 | . 11525 40000 | spea | rpd | 10 | WFG8 | 51 | 0.168898 | 0.018795 | . 11526 40000 | spea | rpd | 10 | WFG9 | 31 | 0.130161 | 0.159438 | . 11527 40000 | spea | rpd | 10 | WFG9 | 41 | 0.153218 | 0.183199 | . 11528 40000 | spea | rpd | 10 | WFG9 | 51 | 0.198191 | 0.204703 | . 11529 rows × 8 columns . def add_line(fig, xmax, col): fig.add_scatter( x=[0, xmax], y=[0, xmax], mode=&quot;lines&quot;, line=go.scatter.Line(color=&quot;red&quot;), row=1, col=col, showlegend=False, ) . fig = px.scatter( df_tuned_default, x=&quot;tuned&quot;, y=&quot;default&quot;, facet_col=&quot;indicator&quot;, category_orders={&quot;indicator&quot;: [&quot;rpd&quot;, &quot;eps&quot;, &quot;igd&quot;]}, height=400, ) for k in fig.layout: if re.search(&#39;xaxis[1-9]+&#39;, k): fig.layout[k].update(matches=None) for k in fig.layout: if re.search(&#39;yaxis[1-9]+&#39;, k): fig.layout[k].update(matches=None) add_line(fig, 0.4, 1) add_line(fig, 4, 2) add_line(fig, 10, 3) fig . Figure 2 . df_anytime = pd.read_csv(&quot;anytime.csv.gz&quot;) df_anytime[&quot;config&quot;] = df_anytime[&quot;config&quot;].fillna(&quot;default&quot;) df_anytime . setup config algo indicator nobj problem nvar seed 0 100 ... 49100 49200 49300 49400 49500 49600 49700 49800 49900 50000 . 0 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 1 | 0.018914 | 0.018914 | ... | 0.000026 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | . 1 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 2 | 0.014705 | 0.014705 | ... | 0.000026 | 0.000025 | 0.000025 | 0.000026 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | . 2 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 3 | 0.012488 | 0.012488 | ... | 0.000026 | 0.000025 | 0.000026 | 0.000026 | 0.000026 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000024 | . 3 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 4 | 0.016872 | 0.016872 | ... | 0.000025 | 0.000024 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | 0.000025 | . 4 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 5 | 0.017557 | 0.017557 | ... | 0.000026 | 0.000026 | 0.000026 | 0.000025 | 0.000025 | 0.000025 | 0.000026 | 0.000026 | 0.000025 | 0.000024 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 7345 tuned | 10000 | spea | rpd | 3 | WFG9 | 50 | 21 | 0.319248 | 0.273683 | ... | 0.009358 | 0.009483 | 0.009145 | 0.009404 | 0.008750 | 0.009153 | 0.009152 | 0.009182 | 0.009248 | 0.009218 | . 7346 tuned | 10000 | spea | rpd | 3 | WFG9 | 50 | 22 | 0.287983 | 0.269812 | ... | 0.022561 | 0.021796 | 0.022061 | 0.022061 | 0.022061 | 0.022061 | 0.022061 | 0.022061 | 0.022061 | 0.022061 | . 7347 tuned | 10000 | spea | rpd | 3 | WFG9 | 50 | 23 | 0.338829 | 0.283009 | ... | 0.009563 | 0.010079 | 0.007908 | 0.007795 | 0.007770 | 0.007758 | 0.007855 | 0.009834 | 0.009410 | 0.009380 | . 7348 tuned | 10000 | spea | rpd | 3 | WFG9 | 50 | 24 | 0.316427 | 0.300587 | ... | 0.009780 | 0.009780 | 0.009780 | 0.009780 | 0.009780 | 0.009780 | 0.009780 | 0.009780 | 0.009780 | 0.009780 | . 7349 tuned | 10000 | spea | rpd | 3 | WFG9 | 50 | 25 | 0.317221 | 0.302947 | ... | 0.014507 | 0.014507 | 0.014507 | 0.014507 | 0.014507 | 0.014507 | 0.014507 | 0.014507 | 0.014507 | 0.014507 | . 7350 rows × 509 columns . df_anytime_mean = df_anytime.groupby([&quot;setup&quot;, &quot;config&quot;, &quot;algo&quot;, &quot;indicator&quot;, &quot;nobj&quot;, &quot;problem&quot;, &quot;nvar&quot;]).mean() df_anytime_mean = df_anytime_mean.drop(columns=[&quot;seed&quot;]) ts_anytime = df_anytime_mean.stack().reset_index( [&quot;setup&quot;, &quot;config&quot;, &quot;algo&quot;, &quot;indicator&quot;, &quot;nobj&quot;, &quot;problem&quot;, &quot;nvar&quot;], name=&quot;value&quot; ) ts_anytime.index = ts_anytime.index.astype(&quot;int&quot;) ts_anytime . setup config algo indicator nobj problem nvar value . 0 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.016579 | . 100 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.016579 | . 200 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.016579 | . 300 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.010874 | . 400 default | default | ibea | rpd | 3 | DTLZ2 | 30 | 0.008861 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 49600 tuned | 40000 | ibea | rpd | 3 | WFG9 | 50 | 0.003880 | . 49700 tuned | 40000 | ibea | rpd | 3 | WFG9 | 50 | 0.003826 | . 49800 tuned | 40000 | ibea | rpd | 3 | WFG9 | 50 | 0.003777 | . 49900 tuned | 40000 | ibea | rpd | 3 | WFG9 | 50 | 0.003810 | . 50000 tuned | 40000 | ibea | rpd | 3 | WFG9 | 50 | 0.003835 | . 147294 rows × 8 columns . ts_ibea_WFG8_3_30 = ts_anytime.query(&quot;algo == &#39;ibea&#39; and problem == &#39;WFG8&#39; and nobj == 3 and nvar == 30&quot;) .sort_index() fig2 = px.line( ts_ibea_WFG8_3_30, y=&quot;value&quot;, x=ts_ibea_WFG8_3_30.index, color=&quot;config&quot;, line_dash=&quot;config&quot;, ) fig2.show() . ts_ibea = ts_anytime.query(&quot;algo == &#39;ibea&#39;&quot;) fig2_full = px.line( ts_ibea, y=&quot;value&quot;, x=ts_ibea.index, color=&quot;config&quot;, line_dash=&quot;config&quot;, animation_frame=&quot;nvar&quot;, facet_col=&quot;problem&quot;, facet_col_wrap=3, height=1500, ) fig2_full.show() . df_ibea_snapshots = ts_ibea.loc[[2500,10000,40000]].reset_index().rename(columns={&quot;index&quot;: &quot;FE&quot;}) rs_ibea_snapshots = df_ibea_snapshots.drop(columns=[&quot;setup&quot;, &quot;algo&quot;, &quot;indicator&quot;]) .pivot_table(index=[&quot;problem&quot;, &quot;nobj&quot;, &quot;nvar&quot;, &quot;FE&quot;], columns=[&quot;config&quot;]) .rank(axis=1).groupby(&quot;FE&quot;).sum() for FE in [2500, 10000, 40000]: rs_ibea_diff = (rs_ibea_snapshots.loc[FE] - rs_ibea_snapshots.loc[FE].min()) display(rs_ibea_diff.sort_values().to_frame().T) . value . config 2500.0 10000.0 40000.0 default . 2500 0.0 | 30.0 | 76.0 | 90.0 | . value . config 10000.0 40000.0 2500.0 default . 10000 0.0 | 19.0 | 46.0 | 59.0 | . value . config 40000.0 10000.0 default 2500.0 . 40000 0.0 | 30.0 | 33.0 | 93.0 | . Figure 4 . ts_10k_WFG3_3_50 = ts_anytime.query(&quot;config == 10000 and problem == &#39;WFG3&#39; and nobj == 3 and nvar == 50&quot;) .sort_index() fig4 = px.line( ts_10k_WFG3_3_50, y=&quot;value&quot;, x=ts_10k_WFG3_3_50.index, color=&quot;algo&quot;, line_dash=&quot;algo&quot;, ) fig4.show() . ts_10k = ts_anytime.query(&quot;config == 10000&quot;) fig4_full = px.line( ts_10k, y=&quot;value&quot;, x=ts_10k.index, color=&quot;algo&quot;, line_dash=&quot;algo&quot;, animation_frame=&quot;nvar&quot;, facet_col=&quot;problem&quot;, facet_col_wrap=3, height=1500, ) for k in fig4_full.layout: if re.search(&#39;yaxis[1-9]+&#39;, k): fig4_full.layout[k].update(matches=None) fig4_full.show() . Figure 5 . algo_fig5 = [&quot;ibea&quot;, &quot;sms&quot;] ind_fig5 = [&quot;rpd&quot;, &quot;igd&quot;] scenario_fig5 = &quot;problem == &#39;WFG8&#39; and nobj == 2 and nvar == 30 and FE == 10000&quot; df_fig5 = df.query(f&quot;algo in {algo_fig5} and indicator in {ind_fig5} and {scenario_fig5} and setup == &#39;tuned&#39;&quot;) fig5 = px.box( df_fig5, y=&quot;algo&quot;, x=&quot;value&quot;, color=&quot;algo&quot;, facet_col=&quot;indicator&quot;, height=300, width=600, ) fig5.show() . df_tuned_no_outliers = df.query(f&quot;setup == &#39;tuned&#39; and {rpd_outliers} or {eps_outliers} or {igd_outliers}&quot;) fig5_full = px.box( df_tuned_no_outliers, x=&quot;nvar&quot;, y=&quot;value&quot;, color=&quot;algo&quot;, facet_col=&quot;nobj&quot;, facet_row=&quot;problem&quot;, animation_frame=&quot;indicator&quot;, height=4000, category_orders={&quot;indicator&quot;: [&quot;rpd&quot;, &quot;eps&quot;, &quot;igd&quot;]} # width=600, ) # for k in fig5_full.layout: # if re.search(&#39;yaxis[1-9]+&#39;, k): # fig5_full.layout[k].update(matches=None) fig5_full.show() . Table 6 . def rank_sum(df, columns=[&quot;algo&quot;]): df_wide = df.pivot_table( index=[&quot;indicator&quot;, &quot;problem&quot;, &quot;nvar&quot;, &quot;seed&quot;], columns=columns, values=[&quot;value&quot;] ) return df_wide.rank(axis=1).groupby(&quot;indicator&quot;).sum() . df_rs = df.groupby([&quot;setup&quot;,&quot;FE&quot;, &quot;nobj&quot;]).apply(rank_sum).droplevel(0, axis=1) . long_rs_tuned = df_rs.query(&quot;setup == &#39;tuned&#39;&quot;).stack().reset_index(name=&quot;value&quot;) long_rs_tuned.pivot_table( index=[&quot;indicator&quot;, &quot;nobj&quot;, &quot;algo&quot;], columns=[&quot;FE&quot;], values=[&quot;value&quot;] ).droplevel(0, axis=1).corr() . FE 2500 10000 40000 . FE . 2500 1.000000 | 0.862971 | 0.813624 | . 10000 0.862971 | 1.000000 | 0.940250 | . 40000 0.813624 | 0.940250 | 1.000000 | . long_rs_default = df_rs.query(&quot;setup == &#39;default&#39;&quot;).stack().reset_index(name=&quot;value&quot;) long_rs_default.pivot_table( index=[&quot;indicator&quot;, &quot;nobj&quot;, &quot;algo&quot;], columns=[&quot;FE&quot;], values=[&quot;value&quot;] ).droplevel(0, axis=1).corr() . FE 2500 10000 40000 . FE . 2500 1.000000 | 0.771288 | 0.676950 | . 10000 0.771288 | 1.000000 | 0.959275 | . 40000 0.676950 | 0.959275 | 1.000000 | . Table 7 . long_rs_tuned.groupby(&quot;nobj&quot;).apply(lambda x : x.pivot_table( index=[&quot;FE&quot;, &quot;algo&quot;], columns=[&quot;indicator&quot;], values=[&quot;value&quot;] ).droplevel(0, axis=1).corr()) . indicator eps igd rpd . nobj indicator . 2 eps 1.000000 | 0.952154 | 0.971495 | . igd 0.952154 | 1.000000 | 0.888355 | . rpd 0.971495 | 0.888355 | 1.000000 | . 3 eps 1.000000 | 0.875681 | 0.938570 | . igd 0.875681 | 1.000000 | 0.857850 | . rpd 0.938570 | 0.857850 | 1.000000 | . 5 eps 1.000000 | 0.902089 | 0.949822 | . igd 0.902089 | 1.000000 | 0.852685 | . rpd 0.949822 | 0.852685 | 1.000000 | . 10 eps 1.000000 | 0.353728 | 0.503038 | . igd 0.353728 | 1.000000 | 0.776752 | . rpd 0.503038 | 0.776752 | 1.000000 | . Table 8 . for FE in [2500, 10000, 40000]: for nobj in [2,3,5,10]: for indicator in [&quot;rpd&quot;, &quot;eps&quot;, &quot;igd&quot;]: idx = (&quot;tuned&quot;, FE, nobj, indicator) rs_diff = (df_rs.loc[idx] - df_rs.loc[idx].min()) display(rs_diff.sort_values().to_frame().T) . algo sms ibea nsga spea moead hype nsga3 cma moga . tuned 2500 2 rpd 0.0 | 11.0 | 456.0 | 971.0 | 1972.0 | 2124.5 | 2396.5 | 5139.5 | 5622.5 | . algo sms ibea nsga spea hype nsga3 moead cma moga . tuned 2500 2 eps 0.0 | 159.0 | 1806.0 | 2048.0 | 2071.5 | 2446.5 | 3976.0 | 5766.5 | 6017.5 | . algo sms ibea nsga3 spea hype nsga cma moead moga . tuned 2500 2 igd 0.0 | 490.0 | 2979.5 | 3025.0 | 3152.5 | 3172.0 | 5494.5 | 6026.0 | 6386.5 | . algo sms ibea hype moead spea nsga nsga3 cma moga . tuned 2500 3 rpd 0.0 | 743.0 | 1516.0 | 2421.5 | 3464.0 | 3950.5 | 4068.5 | 4928.0 | 6727.5 | . algo sms ibea moead hype nsga nsga3 spea cma moga . tuned 2500 3 eps 0.0 | 53.0 | 2456.5 | 3102.0 | 3420.5 | 3580.5 | 4421.0 | 5495.0 | 6352.5 | . algo ibea moead sms nsga nsga3 spea hype cma moga . tuned 2500 3 igd 0.0 | 650.5 | 711.0 | 1434.5 | 2710.5 | 3592.0 | 3944.0 | 4883.0 | 5420.5 | . algo sms ibea moead spea nsga cma nsga3 hype moga . tuned 2500 5 rpd 0.0 | 1402.0 | 1603.5 | 3375.5 | 4245.5 | 4274.0 | 4731.5 | 4765.0 | 7463.0 | . algo sms ibea moead nsga3 nsga spea hype cma moga . tuned 2500 5 eps 0.0 | 745.0 | 1221.5 | 2898.5 | 3766.5 | 3785.5 | 4108.0 | 4365.0 | 5588.0 | . algo sms nsga3 ibea moead hype spea nsga cma moga . tuned 2500 5 igd 0.0 | 57.5 | 242.0 | 610.5 | 1034.0 | 1052.5 | 1931.5 | 3214.0 | 4503.0 | . algo sms ibea cma nsga nsga3 spea hype moead moga . tuned 2500 10 rpd 0.0 | 827.0 | 1919.5 | 2965.0 | 3543.0 | 4257.5 | 5525.0 | 6218.0 | 7505.0 | . algo moead ibea sms nsga cma nsga3 spea hype moga . tuned 2500 10 eps 0.0 | 370.0 | 2092.0 | 2471.0 | 2791.5 | 3315.0 | 3498.5 | 4878.0 | 6297.0 | . algo ibea nsga3 spea cma sms nsga hype moead moga . tuned 2500 10 igd 0.0 | 847.5 | 1272.5 | 1289.5 | 1915.0 | 2228.0 | 3315.0 | 4441.5 | 5562.0 | . algo ibea sms spea nsga moead hype cma nsga3 moga . tuned 10000 2 rpd 0.0 | 113.5 | 1149.5 | 1846.5 | 2819.5 | 3593.0 | 3731.5 | 4017.5 | 6682.5 | . algo sms ibea spea nsga moead hype cma nsga3 moga . tuned 10000 2 eps 0.0 | 425.0 | 894.0 | 1993.0 | 3091.5 | 3401.5 | 3749.0 | 4231.0 | 6740.0 | . algo sms spea ibea hype nsga moead nsga3 cma moga . tuned 10000 2 igd 0.0 | 711.0 | 1387.5 | 2382.5 | 2774.0 | 4237.0 | 5068.0 | 5240.0 | 7297.0 | . algo sms ibea moead hype spea cma nsga nsga3 moga . tuned 10000 3 rpd 0.0 | 556.0 | 1805.0 | 2290.0 | 2302.0 | 3616.0 | 4378.0 | 4627.5 | 7029.5 | . algo sms ibea spea cma hype moead nsga3 nsga moga . tuned 10000 3 eps 0.0 | 494.5 | 2516.0 | 2968.0 | 3132.0 | 3552.0 | 4253.0 | 4885.0 | 7323.5 | . algo ibea sms spea moead hype nsga cma nsga3 moga . tuned 10000 3 igd 0.0 | 654.0 | 1041.0 | 1622.0 | 2960.0 | 3640.0 | 4240.0 | 4264.5 | 6886.5 | . algo sms moead ibea spea cma nsga3 nsga hype moga . tuned 10000 5 rpd 0.0 | 1471.0 | 1535.0 | 3295.5 | 3374.0 | 3897.5 | 4130.5 | 5811.5 | 7562.0 | . algo sms ibea moead cma nsga nsga3 spea hype moga . tuned 10000 5 eps 0.0 | 1713.0 | 2569.0 | 2588.0 | 4086.5 | 4124.5 | 4701.5 | 5907.5 | 7664.0 | . algo sms ibea moead nsga cma spea hype nsga3 moga . tuned 10000 5 igd 0.0 | 1898.0 | 2119.0 | 2329.0 | 2515.5 | 3579.5 | 5040.5 | 5225.5 | 7398.0 | . algo ibea sms cma nsga3 spea nsga hype moead moga . tuned 10000 10 rpd 0.0 | 222.0 | 1116.0 | 2326.0 | 2532.0 | 3241.0 | 4846.0 | 5114.0 | 6919.0 | . algo moead ibea sms cma nsga3 nsga spea hype moga . tuned 10000 10 eps 0.0 | 1258.0 | 2794.0 | 3250.0 | 3347.0 | 4045.0 | 4562.0 | 5214.0 | 6922.0 | . algo nsga3 ibea spea nsga sms cma hype moead moga . tuned 10000 10 igd 0.0 | 36.0 | 646.0 | 1776.0 | 1828.0 | 1987.0 | 2557.0 | 4424.0 | 5151.0 | . algo sms ibea spea nsga moead nsga3 cma hype moga . tuned 40000 2 rpd 0.0 | 453.5 | 791.5 | 1795.5 | 2269.0 | 3492.0 | 3818.0 | 3888.5 | 6788.5 | . algo sms spea ibea nsga moead nsga3 cma hype moga . tuned 40000 2 eps 0.0 | 918.5 | 1197.5 | 2613.5 | 3053.5 | 3208.5 | 3393.5 | 4295.0 | 7060.0 | . algo sms spea ibea moead nsga3 nsga hype cma moga . tuned 40000 2 igd 0.0 | 731.5 | 2404.5 | 2833.0 | 3039.0 | 3409.5 | 4252.5 | 4446.0 | 7364.5 | . algo sms ibea moead spea hype cma nsga nsga3 moga . tuned 40000 3 rpd 0.0 | 715.0 | 1575.0 | 2715.5 | 3510.0 | 3604.0 | 4269.0 | 4276.5 | 7163.0 | . algo sms ibea cma spea moead nsga nsga3 hype moga . tuned 40000 3 eps 0.0 | 994.0 | 2614.0 | 2708.5 | 3137.0 | 4450.0 | 4774.5 | 5284.0 | 7610.0 | . algo moead sms spea ibea nsga cma nsga3 hype moga . tuned 40000 3 igd 0.0 | 269.0 | 763.5 | 1668.0 | 2780.0 | 3118.0 | 3984.5 | 4815.0 | 6686.0 | . algo sms ibea moead cma spea nsga3 nsga hype moga . tuned 40000 5 rpd 0.0 | 1154.0 | 1761.0 | 2915.0 | 2995.0 | 3325.5 | 4188.5 | 5826.5 | 7363.5 | . algo sms ibea cma moead spea nsga nsga3 hype moga . tuned 40000 5 eps 0.0 | 173.5 | 1610.5 | 1650.0 | 3310.0 | 3988.5 | 4436.5 | 5777.5 | 7097.5 | . algo ibea moead sms spea cma nsga nsga3 hype moga . tuned 40000 5 igd 0.0 | 244.0 | 827.0 | 1720.0 | 2074.0 | 2737.5 | 5087.5 | 5189.5 | 6780.5 | . algo ibea sms spea cma nsga3 nsga hype moead moga . tuned 40000 10 rpd 0.0 | 897.0 | 1401.0 | 1878.0 | 2416.0 | 2576.0 | 4899.0 | 5077.0 | 7073.0 | . algo moead ibea nsga3 sms nsga spea cma hype moga . tuned 40000 10 eps 0.0 | 220.0 | 1836.0 | 2309.0 | 2986.0 | 3252.0 | 3705.0 | 4581.0 | 6518.0 | . algo ibea nsga3 spea nsga hype cma sms moead moga . tuned 40000 10 igd 0.0 | 928.0 | 942.0 | 2710.0 | 2937.0 | 3725.0 | 4129.0 | 5513.0 | 6584.0 | . Table 9 . algo_tab9 = [&quot;nsga&quot;, &quot;nsga3&quot;] nobj_tab9 = [2,5] df_nsga_tab9 = df.query(f&quot;algo in {algo_tab9} and indicator == &#39;rpd&#39; and nobj in {nobj_tab9} and FE == 10000&quot;) rs_nsga_tab9 = df_nsga_tab9.groupby(&quot;nobj&quot;).apply(rank_sum, columns=[&quot;setup&quot;,&quot;algo&quot;]).droplevel(0, axis=1) for nobj in [2,5]: idx = (nobj, &quot;rpd&quot;) rs_diff_tab9 = (rs_nsga_tab9.loc[idx] - rs_nsga_tab9.loc[idx].min()) display(rs_diff_tab9.sort_values().to_frame().T) . setup tuned default tuned default . algo nsga nsga nsga3 nsga3 . 2 rpd 0.0 | 1270.5 | 1424.0 | 2257.5 | . setup tuned default . algo nsga nsga3 nsga3 nsga . 5 rpd 0.0 | 11.0 | 901.0 | 1212.0 | . Figure 7 . df_rpd_10k = df.query(f&quot;indicator == &#39;rpd&#39; and FE == 10000 and setup == &#39;tuned&#39; and {rpd_outliers}&quot;) df_rpd_10k[&quot;nobj&quot;] = df_rpd_10k[&quot;nobj&quot;].astype(&quot;category&quot;) px.box( df_rpd_10k, x=&quot;nobj&quot;, color=&quot;nobj&quot;, y=&quot;value&quot;, facet_col=&quot;problem&quot;, facet_col_wrap=7, range_y=(0,0.4), points=False, ) . /home/a206/.local/lib/python3.6/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy . Figure 8 . problem_fig8 = [&quot;WFG1&quot;, &quot;WFG4&quot;] nvar_fig8 = [40, 41] setup_fig8 = &quot;FE == 40000 and indicator == &#39;igd&#39; and setup == &#39;tuned&#39;&quot; df_fig8 = df.query(f&quot;problem in {problem_fig8} and nvar in {nvar_fig8} and {setup_fig8} and {igd_outliers}&quot;) fig8 = px.box( df_fig8, x=&quot;value&quot;, y=&quot;algo&quot;, color=&quot;algo&quot;, facet_col=&quot;nobj&quot;, facet_row=&quot;problem&quot;, category_orders={&quot;algo&quot;: [&quot;cma&quot;, &quot;hype&quot;, &quot;ibea&quot;, &quot;moead&quot;, &quot;moga&quot;, &quot;nsga&quot;, &quot;nsga3&quot;, &quot;sms&quot;, &quot;spea&quot;][::-1]}, ) fig8.show() .",
            "url": "https://leobezerra.github.io/moea-benchmark-analysis/2022/03/30/anytime.html",
            "relUrl": "/2022/03/30/anytime.html",
            "date": " • Mar 30, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://leobezerra.github.io/moea-benchmark-analysis/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://leobezerra.github.io/moea-benchmark-analysis/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://leobezerra.github.io/moea-benchmark-analysis/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://leobezerra.github.io/moea-benchmark-analysis/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}